import streamlit as st
import pandas as pd
from MathTools.main import solve
from MathTools.polynomial import kramer_method
import re
import sympy as sm
from MlService.main import generate_response, get_predictions_theory, \
                            get_predictions_topic
import plotly.graph_objs as go



NAME_TOPIC = ['–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–î–∏—Ä–∏—Ö–ª–µ',
              '–ò–Ω–≤–∞—Ä–∏–∞–Ω—Ç', '–ú–Ω–æ–≥–æ—á–ª–µ–Ω',
              '–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞', '–û—Ü–µ–Ω–∫–∞+–ü—Ä–∏–º–µ—Ä',
              '–¢–µ–æ—Ä–∏—è —á–∏—Å–µ–ª', '–ì—Ä–∞—Ñ—ã']


def gen_solve():
    st.title("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è")
    messages = st.container()
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ..."):
        messages = st.container()
        messages.chat_message("user", avatar="üëΩ").write(prompt)
        messages.chat_message("bot", avatar="ü§ñ").write(f"–ü–æ–ª—É—á–∏–ª! –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—à–µ–Ω–∏—è...")
        answer = generate_response(prompt)
        messages.chat_message("bot", avatar="ü§ñ").write(answer)


def topic_class():
    st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã")
    user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ:")
    ver = st.number_input('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
                          min_value=0, max_value=99, step=1)

    if st.button("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", type="primary"):
        if user_input:
            answer, prob = get_predictions_topic(user_input)
            st.markdown(f"### –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ç–µ–º—ã:")
            for name in answer:
                if int(answer[name]) <= ver:
                    break
                st.write(f'{name} - {answer[name]}%')

            fig = go.Figure(data=[go.Pie(labels=NAME_TOPIC, values=prob)])
            fig.update_layout(width=800, height=600,
                              margin=dict(
                                  l=0.5,  # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
                                  r=0,  # –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
                                  t=0,  # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                                  b=0.3,  # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
                              ),
                              legend=dict(orientation="h",
                                          xanchor="center",
                                          yanchor="top",
                                          x=0.4,
                                          y=-0.3,
                                          font=dict(size=18, )
                                          ))
            st.plotly_chart(fig)
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ ")


def prediction_theory():
    st.title("–ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏")
    user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ:")
    ver = st.number_input('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
                          min_value=0, max_value=99, step=1)
    if st.button("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", type="primary"):
        if user_input:
            answer = get_predictions_theory(user_input)
            st.markdown(f"### –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ç–µ–º—ã:")
            for name in answer:
                if int(answer[name]) <= ver:
                    break
                st.write(f'{name} - {answer[name]}%')
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ")


def math_tools():
    st.title("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    option = st.selectbox(
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç',
        ('–§–æ—Ä–º—É–ª–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π', '–§–æ—Ä–º—É–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π',
         '–ë–∏–Ω–æ–º –ù—å—é—Ç–æ–Ω–∞', '–†–µ—à–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π',
         "–ü–æ–¥—Å—á–µ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞", "–£–∑–Ω–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω—ã",
         "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π", '–§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–∞',
         "–í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", "–í—ã—á–∏—Å–ª–∏—Ç—å –¥–µ–ª–∏—Ç–µ–ª–∏ —á–∏—Å–ª–∞",
         "–†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ")
    )

    if option == '–§–æ—Ä–º—É–ª–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π':
        n = st.number_input('–í–≤–µ–¥–∏—Ç–µ n', min_value=0, step=1)
        k = st.number_input('–í–≤–µ–¥–∏—Ç–µ k', min_value=0, step=1)
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            if n and k:
                answer = solve(f'combinatorics_C_n={n};k={k}')
                answer = list(map(lambda x: x.replace(' ', ""), re.split(r'[=/]', answer)))
                answer = answer[0] + ' = ' + '\dfrac{' + answer[1][1:-1] + '}' \
                        '{' + answer[2][1:-1] + '}' + f' = {answer[3]}'
                print(answer)
                st.markdown("### –†–µ—à–µ–Ω–∏–µ:")
                st.latex(answer)
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    elif option == '–§–æ—Ä–º—É–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π':
        n = st.number_input('–í–≤–µ–¥–∏—Ç–µ n', min_value=0, step=1)
        k = st.number_input('–í–≤–µ–¥–∏—Ç–µ k', min_value=0, step=1)
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            if n and k:
                answer = solve(f'combinatorics_A_n={n};k={k}')
                answer = list(map(lambda x: x.replace(' ', ""), re.split(r'[=/]', answer)))
                answer = answer[0] + ' = ' + '\dfrac{' + answer[1][1:-1] + "}" \
                                    "{" + answer[2][1:-1] + '}' + f' = {answer[3]}'
                st.markdown("### –†–µ—à–µ–Ω–∏–µ:")
                st.latex(answer)
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    elif option == '–ë–∏–Ω–æ–º –ù—å—é—Ç–æ–Ω–∞':
        a = st.number_input('–í–≤–µ–¥–∏—Ç–µ a', min_value=0, step=1)
        b = st.number_input('–í–≤–µ–¥–∏—Ç–µ b', min_value=0, step=1)
        n = st.number_input('–í–≤–µ–¥–∏—Ç–µ n', min_value=0, step=1)
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            if n and b and n:
                answer = solve(f'polynomial_binomialTheorem_equation=({a}+{b})^{n}')
                st.markdown("### –†–µ—à–µ–Ω–∏–µ:")
                st.latex(answer)
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    elif option == '–†–µ—à–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π':
        n = st.number_input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö', min_value=0, max_value=9, step=1)
        if n:
            df = pd.DataFrame([{f'k_{num}': 0 for num in range(1, n+1)} for _ in range(n)])
            df['y'] = 0
            edited_df = st.data_editor(df)
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
                X = edited_df[[column for column in edited_df.columns if column != 'y']].values
                Y = edited_df['y'].values
                answer = kramer_method(sm.Matrix(X), sm.Matrix(Y))
                st.markdown("### –†–µ—à–µ–Ω–∏–µ:")
                st.write(answer.replace('\n', '\n\n'))
    elif option == '–ü–æ–¥—Å—á–µ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞':
        df = pd.DataFrame([{'a': 1, "b": 0, 'c': 0}])
        edited_df = st.data_editor(df)
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            a, b, c = edited_df['a'][0], edited_df['b'][0], edited_df['c'][0]
            if a != 0:
                answer = solve(f'polynomial_discriminant_equation={a}*x^2+({b})*x+({c});variable=x')
                st.markdown("### –†–µ—à–µ–Ω–∏–µ:")
                st.latex(answer)
            else:
                st.error('–æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞')
    elif option == '–£–∑–Ω–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω—ã':
        df = pd.DataFrame([{'a': 0, "b": 0, 'c': 0}])
        edited_df = st.data_editor(df)
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            a, b, c = edited_df['a'][0], edited_df['b'][0], edited_df['c'][0]
            if a != 0:
                equation = f'{a}*x^2+({b})*x+({c})'
                answer_x, answer_y = solve(f'polynomial_vertexOfParabola_equation={equation};variable=x')
                st.markdown("### –†–µ—à–µ–Ω–∏–µ:")
                st.latex(equation)
                st.latex(answer_x)
                st.latex(answer_y)
            else:
                st.error('–æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ –∏ –Ω–µ—Ç —Ç–æ—á–∫–∏')
    elif option == "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π":
        pol = st.text_input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        variable = st.text_input("–ü–æ –∫–∞–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞—Ç—å:")
        st.write("–í–∞—à–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: ")
        st.latex(pol)
        st.write("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ")
        st.latex(variable)

        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            answer = solve(f'polynomial_differentiate_pol={pol};variable={variable}')
            print(answer)
            st.markdown("### –†–µ—à–µ–Ω–∏–µ:")
            answer = '\dfrac{' + pol + '}' + '{d' + variable + '}' " = " + answer
            st.latex(answer)
    elif option == "–í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ":
        quotient = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:")
        st.write("–í–∞—à–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: ")
        st.latex(quotient)

        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            answer = solve(f'calk_evalWithNumber_quotient={quotient}')
            st.markdown("### –û—Ç–≤–µ—Ç:")
            st.latex(answer)
    elif option == "–§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–∞":
        n = st.number_input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', min_value=1, step=1)
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            answer = solve(f'calk_primefactorsNumber_n={n}')
            st.latex(f'{n} = ' + answer)
    elif option == "–í—ã—á–∏—Å–ª–∏—Ç—å –¥–µ–ª–∏—Ç–µ–ª–∏ —á–∏—Å–ª–∞":
        n = st.number_input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ', min_value=1, step=1)
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            answer = solve(f'calk_findDivisors_n={n}')
            st.write(answer)
    elif option == "–†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ":
        equation = st.text_input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        variable = st.text_input("–ü–æ –∫–∞–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ—à–∏—Ç—å:")
        st.write("–í–∞—à–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: ")
        st.latex(equation)
        st.write("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ")
        st.latex(variable)

        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            answer = solve(f'polynomial_solveEquation_equation={equation};variable={variable}')
            answer = answer.split(';')
            st.markdown("### –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ—Ä–Ω–∏:")
            for ind, value in enumerate(answer):
                st.latex(value)



def main():
    st.sidebar.title("–†–∞–∑–¥–µ–ª—ã")
    selected_section = st.sidebar.radio(
        "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É:",
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è",
         "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã",
         "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏",
         "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    )

    if selected_section == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è":
        gen_solve()
    elif selected_section == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º—ã":
        topic_class()
    elif selected_section == "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏":
        prediction_theory()
    elif selected_section == "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":
        math_tools()


if __name__ == "__main__":
    main()